// <auto-generated>
using System.Reflection;

namespace System.Private.CoreLib
{
    internal static class Strings { }
}
namespace System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(System.Private.CoreLib.Strings)));

     
        /// <summary>Decimal constructor requires an array or span of four valid decimal bytes.</summary>
        internal static string @Arg_DecBitCtor => GetResourceString("Arg_DecBitCtor");
    
        /// <summary>Object must be of type Decimal.</summary>
        internal static string @Arg_MustBeDecimal => GetResourceString("Arg_MustBeDecimal");
        /// <summary>Type must derive from Delegate.</summary>
    
        /// <summary>The value '{0}' is not valid for this usage of the type {1}.</summary>
        internal static string @Argument_InvalidEnumValue => GetResourceString("Argument_InvalidEnumValue");
        /// <summary>The specified field must be declared on the generic type definition of the specified type.</summary>
   
        /// <summary>Decimal can only round to between 0 and 28 digits of precision.</summary>
        internal static string @ArgumentOutOfRange_DecimalRound => GetResourceString("ArgumentOutOfRange_DecimalRound");
        /// <summary>Decimal's scale value must be between 0 and 28, inclusive.</summary>
        internal static string @ArgumentOutOfRange_DecimalScale => GetResourceString("ArgumentOutOfRange_DecimalScale");
        /// <summary>endIndex cannot be greater than startIndex.</summary>
  
        /// <summary>Value was either too large or too small for a Currency.</summary>
        internal static string @Overflow_Currency => GetResourceString("Overflow_Currency");
        /// <summary>Value was either too large or too small for a Decimal.</summary>
        internal static string @Overflow_Decimal => "Overflow_Decimal";
        /// <summary>The duration cannot be returned for TimeSpan.MinValue because the absolute value of TimeSpan.MinValue exceeds the value of TimeSpan.MaxValue.</summary>
   
    }
}
