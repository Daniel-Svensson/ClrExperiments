

; Arguments
; ECX       Low Digit
; EDX       High Digit
; R8        Divisor
; R9        *Remainder

; RAX       Quotient upon return

.code
@_udiv64_asm@8 proc
 mov         eax,ecx  
;     67: 		div ulDen;
div         eax, dword ptr [esp+4]   ; +8
; // get pointer to reminder before we can store actual value there
 mov         ecx, dword ptr [esp+8]  ; + 0Ch
// store remainder before returning with result already in eax
 mov         dword ptr [ecx], edx  
 ret 8
@_udiv64_asm@8 endp

; Arguments
; RCX       Low Digit
; RDX       High Digit
; R8        Divisor

; RAX       Quotient upon return
; extern "C" digit32 _udiv64_v2(digit *low, digit32 hi, digit32 divisor);

; .code
; _udiv128_v2 proc
    ; mov rax, [rcx]    ; Put the low digit in place (hi is already there)
    ;div r8      ; 128 bit divide rdx:rax/r8 = rdx remainder, rax quotient
    ;mov [rcx], rax   ; Save the quotient
	;mov rax, rdx	; Set remainder as return value
    ;ret     ; Return the remainder
;_udiv128_v2 endp

end